# Fragments

fragment TransactionDetails on Transaction {
  __typename
  id
  side
  type
  label
  counterparty
  reference
  externalReference
  payment {
    id
    createdAt
  }
  originTransaction @include(if: $canViewAccount) {
    id
    type
    executionDate
    amount {
      currency
      value
    }
    statusInfo {
      __typename
      status
      ... on RejectedTransactionStatusInfo {
        status
        reason
      }
    }
  }
  statusInfo {
    __typename
    status
    ... on BookedTransactionStatusInfo {
      bookingDate
    }
    ... on PendingTransactionStatusInfo {
      pendingEndDate
    }
    ... on CanceledTransactionStatusInfo {
      canceledDate
    }
    ... on RejectedTransactionStatusInfo {
      status
      reason
    }
    ... on UpcomingTransactionStatusInfo {
      status
      executionDate
    }
  }
  amount {
    currency
    value
  }
  createdAt
  executionDate
  updatedAt
  ... on CardTransaction {
    maskedPan
    merchantCity
    merchantCountry
    originalAmount {
      currency
      value
    }
    card @include(if: $canQueryCardOnTransaction) {
      id
      accountMembership {
        id
        user {
          id
          firstName
          lastName
        }
      }
    }
    currencyExchange {
      __typename
      exchangeRate
    }
  }
  ... on SEPACreditTransferTransaction {
    creditor {
      name
      IBAN
    }
    debtor {
      name
      IBAN
    }
  }
  ... on InternalDirectDebitTransaction {
    reservedAmount {
      currency
      value
    }
    reservedAmountReleasedAt
    creditor {
      accountId
    }
    mandate {
      id
    }
  }
  ... on FeeTransaction {
    feesType
    creditor {
      name
    }
    originTransaction {
      id
      label
      statusInfo {
        status
        ... on RejectedTransactionStatusInfo {
          reason
        }
      }
      type
      updatedAt
      executionDate
      createdAt
      amount {
        currency
        value
      }
    }
  }
  ... on SEPADirectDebitTransaction {
    __typename
    reservedAmountReleasedAt

    creditor {
      name
      IBAN
    }
    debtor {
      name
      IBAN
    }
    reservedAmount {
      value
      currency
    }
    mandate {
      id
      ... on SEPAReceivedDirectDebitMandate {
        ultimateCreditorName
      }
      ... on SEPAPaymentDirectDebitMandate {
        debtor {
          name
        }
      }
    }
  }
  ... on InternationalCreditTransferTransaction {
    creditor {
      ... on InternationalCreditTransferInCreditor {
        name
      }
      ... on InternationalCreditTransferOutCreditor {
        name
        details {
          key
          value
        }
      }
    }
    reference
    paymentProduct
    statusInfo {
      status
      ... on RejectedTransactionStatusInfo {
        reason
      }
    }
    internationalCurrencyExchange: currencyExchange {
      exchangeRate
      __typename
      sourceAmount {
        currency
        value
      }
      targetAmount {
        currency
        value
      }
    }
  }
  ... on InternalCreditTransfer {
    creditor {
      name
    }
  }
  ... on CheckTransaction {
    reservedAmount {
      currency
      value
    }
    reservedAmountReleasedAt
    cmc7
    rlmcKey
  }
}

fragment AddressDetails on Address {
  __typename
  addressLine1
  addressLine2
  city
  country
  postalCode
  state
}

# Layout queries

fragment AccountHolderForCardSettings on AccountHolder {
  __typename
  id
  info {
    __typename
    name
    type
  }
}

fragment IdentificationLevelsFragment on IdentificationLevels {
  __typename
  expert
  QES
  PVID
}

query AuthStatus {
  user {
    id
  }
}

fragment IdentificationLevelFragment on IdentificationLevelStatusInfo {
  ... on NotSupportedIdentificationLevelStatusInfo {
    status
  }
  ... on StartedIdentificationLevelStatusInfo {
    status
  }
  ... on PendingIdentificationLevelStatusInfo {
    status
  }
  ... on ValidIdentificationLevelStatusInfo {
    status
  }
  ... on InvalidIdentificationLevelStatusInfo {
    reasons
    status
  }
  ... on CanceledIdentificationLevelStatusInfo {
    status
  }
  ... on ExpiredIdentificationLevelStatusInfo {
    status
    expiredAt
  }
  ... on NotStartedIdentificationLevelStatusInfo {
    status
  }
}

fragment Identification on Identification {
  id
  levels {
    expert {
      ...IdentificationLevelFragment
    }
    pvid {
      ...IdentificationLevelFragment
    }
    qes {
      ...IdentificationLevelFragment
    }
  }
  process
}

query LastRelevantIdentification(
  $accountMembershipId: ID!
  $identificationProcess: [IdentificationProcess!]
) {
  accountMembership(id: $accountMembershipId) {
    id
    user {
      id
      identifications(
        first: 1
        orderBy: { field: updatedAt, direction: Desc }
        filters: { processes: $identificationProcess }
      ) {
        edges {
          node {
            ...Identification
          }
        }
      }
    }
  }
}

query AccountArea($accountMembershipId: ID!) {
  accountMembership(id: $accountMembershipId) {
    id
    ...AccountMembership
    account {
      IBAN
      bankDetails
      language
      id
      paymentLevel
      paymentAccountType
      balances {
        ...AccountBalances
      }
      holder {
        id
        info {
          type
        }
        supportingDocumentCollections(first: 1) {
          edges {
            node {
              id
              statusInfo {
                status
              }
            }
          }
        }
        verificationStatus
      }
      transactions(first: 0) {
        totalCount
      }
      accountMembershipsWithBindingUserError: memberships(
        first: 0
        filters: { status: [BindingUserError] }
      ) {
        totalCount
      }
    }
    user {
      id
      accountMemberships(first: 0) {
        totalCount
      }
    }
  }
  projectInfo {
    id
    accentColor
    name
    logoUri
    B2BMembershipIDVerification
    webBankingSettings {
      accountStatementsVisible: canViewAccountStatement
      accountVisible: canViewAccountDetails
      memberCreationVisible: canAddNewMembers
      memberListVisible: canViewMembers
      paymentListVisible: canViewPaymentList
      physicalCardOrderVisible: canOrderPhysicalCards
      transferCreationVisible: canInitiatePaymentsToNewBeneficiaries
      virtualCardOrderVisible: canOrderVirtualCards
      virtualIbansVisible: canManageVirtualIbans
    }
    supportingDocumentSettings {
      collectMode
    }
  }
  user {
    id
    firstName
    lastName
    mobilePhoneNumber
    identificationLevels {
      ...IdentificationLevelsFragment
    }
  }
}

# Pages queries

query AccountDetailsIbanPage($accountId: ID!) {
  account(accountId: $accountId) {
    id
    IBAN
    BIC
    bankDetails
    name
    statusInfo {
      status
    }
    holder {
      id
      verificationStatus
      info {
        name
      }
      residencyAddress {
        addressLine1
        addressLine2
        city
        postalCode
        country
      }
    }
  }
}

query AccountDetailsVirtualIbansPage($accountId: ID!, $first: Int!, $after: String) {
  account(accountId: $accountId) {
    id
    paymentLevel
    virtualIbanEntries(first: $first, after: $after) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        node {
          id
          IBAN
          BIC
          status
        }
      }
    }
  }
}

mutation AddVirtualIban($accountId: ID!) {
  addVirtualIbanEntry(input: { accountId: $accountId }) {
    __typename
    ... on AddVirtualIbanEntrySuccessPayload {
      virtualIbanEntry {
        id
      }
    }
  }
}

mutation CancelVirtualIban($virtualIbanId: ID!) {
  cancelVirtualIbanEntry(input: { virtualIbanEntryId: $virtualIbanId }) {
    __typename
    ... on CancelVirtualIbanEntrySuccessPayload {
      virtualIbanEntry {
        id
      }
    }
  }
}

query AccountDetailsBillingPage($accountId: ID!, $first: Int!, $after: String) {
  account(accountId: $accountId) {
    id
    invoices(first: $first, after: $after) {
      edges {
        cursor
        node {
          openingDate
          closingDate
          id
          name
          createdAt
          updatedAt
          status
          url
          amount {
            currency
            value
          }
        }
      }
      pageInfo {
        endCursor
        hasNextPage
      }
      totalCount
    }
  }
}

query AccountDetailsSettingsPage(
  $accountId: ID!
  $filters: LegalDocumentsFilterInput
  $language: String!
) {
  account(accountId: $accountId) {
    id
    country
    language
    name
    legalDocuments(first: 1, filters: $filters) {
      edges {
        node {
          id
          type
          url
          statusInfo {
            status
          }
        }
      }
    }
    statusInfo {
      status
    }
    holder {
      id
      info {
        __typename
        ... on AccountHolderCompanyInfo {
          vatNumber
          registrationNumber
          taxIdentificationNumber
        }
        ... on AccountHolderIndividualInfo {
          taxIdentificationNumber
        }
      }
      residencyAddress {
        country
      }
    }
  }
  projectInfo {
    id
    tcuDocumentUri(language: $language)
    name
  }
}

mutation UpdateAccountLanguage($id: ID!, $language: AccountLanguage!) {
  updateAccount(input: { accountId: $id, language: $language }) {
    __typename
    ... on UpdateAccountSuccessPayload {
      account {
        id
      }
    }
  }
}

mutation UpdateAccount(
  $updateAccountInput: UpdateAccountInput!
  $updateAccountHolderInput: UpdateAccountHolderInput!
) {
  updateAccount(input: $updateAccountInput) {
    __typename
    ... on UpdateAccountSuccessPayload {
      account {
        id
        name
      }
    }
  }
  updateAccountHolder(input: $updateAccountHolderInput) {
    __typename
    ... on UpdateAccountHolderSuccessPayload {
      accountHolder {
        id
      }
    }
  }
}

query AccountsListPage($first: Int!, $after: String) {
  accounts(first: $first, after: $after) {
    pageInfo {
      endCursor
      hasNextPage
    }
    edges {
      node {
        id
        number
        name
        balances {
          ...AccountBalances
        }
        holder {
          id
          info {
            name
          }
        }
      }
    }
  }
}

query AccountStatementsPage(
  $accountId: ID!
  $first: Int!
  $after: String
  $filters: StatementFiltersInput
) {
  account(accountId: $accountId) {
    id
    name
    number
    holder {
      id
      info {
        name
      }
    }
    statements(first: $first, after: $after, filters: $filters) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          __typename
          id
          closingDate
          openingDate
          createdAt
          status
          period
          type {
            __typename
            ... on PdfStatement {
              url
            }
            ... on CsvStatement {
              url
            }
          }
        }
      }
    }
  }
}

fragment AccountMembershipsTotalCount on AccountMembership {
  __typename
  id
  account {
    id
    memberships(filters: { status: [Enabled, InvitationSent, BindingUserError, Suspended] }) {
      totalCount
    }
  }
}

fragment CardListItem on Card {
  __typename
  id
  type
  name
  statusInfo {
    status
  }
  spendingLimits {
    period
    amount {
      currency
      value
    }
  }
  spending {
    period
    amount {
      currency
      value
    }
  }
  physicalCard {
    statusInfo {
      status
    }
  }
  cardDesignUrl
  accountMembership {
    id
    account {
      id
      number
      holder {
        id
        info {
          name
        }
      }
    }
    statusInfo {
      __typename
      ... on AccountMembershipBindingUserErrorStatusInfo {
        restrictedTo {
          firstName
          lastName
        }
      }
      ... on AccountMembershipInvitationSentStatusInfo {
        restrictedTo {
          firstName
          lastName
        }
      }
    }
    user {
      id
      firstName
      lastName
    }
  }
}

fragment CardListPageData on CardConnection {
  __typename
  pageInfo {
    endCursor
    hasNextPage
  }
  edges {
    cursor
    node {
      ...CardListItem
    }
  }
}

query CardListPage($filters: CardFiltersInput, $first: Int!, $after: String) {
  cards(
    filters: $filters
    orderBy: { field: createdAt, direction: Desc }
    first: $first
    after: $after
  ) {
    ...CardListPageData
  }
}

query AccountMembershipCardListPage(
  $accountMembershipId: ID!
  $filters: CardFiltersInput
  $first: Int!
  $after: String
) {
  accountMembership(id: $accountMembershipId) {
    id
    ...AccountMembershipsTotalCount
    cards(
      filters: $filters
      orderBy: { field: createdAt, direction: Desc }
      first: $first
      after: $after
    ) {
      ...CardListPageData
    }
  }
}

query CardCount($filters: CardFiltersInput, $first: Int!) {
  cards(filters: $filters, orderBy: { field: createdAt, direction: Desc }, first: $first) {
    totalCount
    edges {
      cursor
      node {
        id
      }
    }
  }
}

fragment DigitalCard on DigitalCard {
  __typename
  id
  createdAt
  updatedAt
  walletProvider {
    name
  }
  ... on CompleteDigitalCard {
    device {
      name
      type
    }
  }
}

query CardPage($cardId: ID!) {
  projectInfo {
    id
    B2BMembershipIDVerification
  }
  card(cardId: $cardId) {
    id
    type
    cardMaskedNumber
    expiryDate
    name
    cardDesignUrl
    mainCurrency
    eCommerce
    withdrawal
    nonMainCurrencyTransactions
    international
    issuingCountry
    statusInfo {
      status
    }
    cardProduct {
      ...CardProduct
    }
    accountMembership {
      id
      canManageAccountMembership
      recommendedIdentificationLevel
      hasRequiredIdentificationLevel
      canViewAccount
      canManageBeneficiaries
      canInitiatePayments
      canManageCards
      statusInfo {
        __typename
        status
        ... on AccountMembershipBindingUserErrorStatusInfo {
          idVerifiedMatchError
          firstNameMatchError
          lastNameMatchError
          phoneNumberMatchError
          birthDateMatchError
          restrictedTo {
            firstName
            lastName
          }
        }
        ... on AccountMembershipInvitationSentStatusInfo {
          restrictedTo {
            firstName
            lastName
          }
        }
      }
      user {
        id
        firstName
        lastName
        identificationLevels {
          expert
          QES
          PVID
        }
      }
      account {
        id
        paymentLevel
        holder {
          id
          ...AccountHolderForCardSettings
          residencyAddress {
            addressLine1
            addressLine2
            city
            postalCode
            country
          }
        }
      }
    }
    spendingLimits {
      amount {
        currency
        value
      }
      period
      type
    }
    spending {
      amount {
        currency
        value
      }
      period
    }
    # at the moment, we don't paginate on front-end side
    # so we load 100 first to have all digital cards at the moment
    digitalCards(first: 100, filters: { status: "Enabled" }) {
      edges {
        node {
          ...DigitalCard
        }
      }
    }
    # We need the first param because we use relayPagination on this ressource
    transactions(first: 1) {
      totalCount
    }
    physicalCard {
      expiryDate
      cardMaskedNumber
      identifier
      statusInfo {
        __typename
        status
        ... on PhysicalCardToActivateStatusInfo {
          isPINReady
          estimatedDeliveryDate
          trackingNumber
          shippingProvider
          address {
            ...AddressDetails
          }
        }
        ... on PhysicalCardRenewedStatusInfo {
          isPINReady
          estimatedDeliveryDate
          trackingNumber
          shippingProvider
          address {
            ...AddressDetails
          }
        }
        ... on PhysicalCardConsentPendingStatusInfo {
          consent {
            id
            consentUrl
          }
        }
        ... on PhysicalCardToRenewStatusInfo {
          address {
            addressLine1
            addressLine2
            city
            postalCode
            country
          }
        }
      }
      previousPhysicalCards {
        cardMaskedNumber
        customOptions {
          additionalPrintedLine
        }
        expiryDate
        offlineSpendingLimit {
          currency
          value
        }
        isExpired
      }
    }
  }
}

query CardTransactionsPage(
  $cardId: ID!
  $first: Int!
  $canQueryCardOnTransaction: Boolean!
  $canViewAccount: Boolean!
  $after: String
  $filters: TransactionsFiltersInput
) {
  card(cardId: $cardId) {
    id
    cardDesignUrl
    statusInfo {
      status
    }
    accountMembership {
      id
      recommendedIdentificationLevel
      statusInfo {
        __typename
        ... on AccountMembershipBindingUserErrorStatusInfo {
          restrictedTo {
            firstName
            lastName
          }
        }
        ... on AccountMembershipInvitationSentStatusInfo {
          restrictedTo {
            firstName
            lastName
          }
        }
      }
      user {
        id
        firstName
        lastName
      }
    }
    transactions(first: $first, after: $after, filters: $filters) {
      pageInfo {
        endCursor
        hasNextPage
      }
      totalCount
      edges {
        node {
          ...TransactionDetails
        }
      }
    }
  }
}

query CardSettingsPage($cardId: ID!) {
  card(cardId: $cardId) {
    id
    cardMaskedNumber
    physicalCard {
      identifier
    }
    statusInfo {
      status
    }
    accountMembership {
      id
      account {
        id
        number
        holder {
          id
          info {
            name
          }
        }
      }
      user {
        id
        firstName
        lastName
      }
    }
    spendingLimits {
      amount {
        currency
        value
      }
      period
      type
    }
    mainCurrency
    eCommerce
    withdrawal
    nonMainCurrencyTransactions
    international
  }
}

query OrderPhysicalCardPage($cardId: ID!) {
  card(cardId: $cardId) {
    id
    accountMembership {
      id
      account {
        id
        number
        holder {
          id
          info {
            name
            type
          }
          residencyAddress {
            addressLine1
            addressLine2
            city
            postalCode
            state
            country
          }
        }
      }
      statusInfo {
        __typename
        status
        ... on AccountMembershipInvitationSentStatusInfo {
          restrictedTo {
            firstName
            lastName
          }
        }
        ... on AccountMembershipBindingUserErrorStatusInfo {
          restrictedTo {
            firstName
            lastName
          }
        }
        ... on AccountMembershipConsentPendingStatusInfo {
          restrictedTo {
            firstName
            lastName
          }
        }
      }
      user {
        id
        firstName
        lastName
      }
    }
  }
}

mutation PrintPhysicalCard($input: PrintPhysicalCardInput!) {
  printPhysicalCard(input: $input) {
    __typename
    ... on PrintPhysicalCardSuccessPayload {
      physicalCard {
        statusInfo {
          __typename
          ... on PhysicalCardConsentPendingStatusInfo {
            consent {
              id
              consentUrl
            }
          }
        }
      }
    }
  }
}

query ConsentCallbackPage($consentId: ID!) {
  consent(id: $consentId) {
    id
    status
  }
}

query EditMemberPage($id: ID!) {
  accountMembership(id: $id) {
    id
    email
    legalRepresentative
    account {
      id
      country
      statusInfo {
        status
      }
    }
    statusInfo {
      __typename
      status
      ... on AccountMembershipBindingUserErrorStatusInfo {
        restrictedTo {
          birthDate
          firstName
          lastName
          phoneNumber
        }
        idVerifiedMatchError
      }
      ... on AccountMembershipInvitationSentStatusInfo {
        restrictedTo {
          birthDate
          firstName
          lastName
          phoneNumber
        }
      }
    }
    canInitiatePayments
    canManageAccountMembership
    canManageBeneficiaries
    canViewAccount
    user {
      id
      birthDate
      firstName
      lastName
      mobilePhoneNumber
    }
    cards(filters: { statuses: Enabled }) {
      edges {
        node {
          id
          statusInfo {
            __typename
          }
        }
      }
      totalCount
    }
    residencyAddress {
      addressLine1
      addressLine2
      city
      postalCode
      state
      country
    }
    taxIdentificationNumber
  }
}

query NewStandingOrderPage($accountId: ID!) {
  account(accountId: $accountId) {
    IBAN
    currency
    name
    id
    number
    balances {
      ...AccountBalances
    }
  }
}

query EditStandingOrderPage($id: ID!) {
  standingOrder(standingOrderId: $id) {
    id
    label
    period
    reference
    statusInfo {
      status
    }
    sepaBeneficiary {
      id
      name
    }
    targetAvailableBalance {
      currency
      value
    }
    amount {
      currency
      value
    }
    lastExecutionDate
    firstExecutionDate
    nextExecutionDate
    createdBy {
      id
      firstName
      lastName
    }
  }
}

query StandingOrdersHistoryPage(
  $standingOrderId: ID!
  $first: Int!
  $canQueryCardOnTransaction: Boolean!
  $canViewAccount: Boolean!
  $after: String
  $filters: PaymentFiltersInput
  $orderBy: PaymentOrderByInput
) {
  standingOrder(standingOrderId: $standingOrderId) {
    id
    label
    reference
    period
    firstExecutionDate
    lastExecutionDate
    statusInfo {
      status
    }
    targetAvailableBalance {
      value
    }
    amount {
      value
    }
    sepaBeneficiary {
      id
      name
    }
    payments(first: $first, after: $after, filters: $filters, orderBy: $orderBy) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        node {
          id
          transactions {
            pageInfo {
              endCursor
              hasNextPage
            }
            edges {
              node {
                ...TransactionDetails
              }
            }
            totalCount
          }
        }
      }
    }
  }
}

query StandingOrdersPage($accountId: ID!) {
  account(accountId: $accountId) {
    id
    number
    name
    holder {
      id
      info {
        name
      }
    }

    standingOrders {
      totalCount
      edges {
        node {
          id
          period
          reference
          label
          sepaBeneficiary {
            id
            name
          }
          targetAvailableBalance {
            value
          }
          statusInfo {
            status
          }
          amount {
            value
          }
          lastExecutionDate
          nextExecutionDate
          firstExecutionDate
        }
      }
    }
  }
}

query getStandingOrders(
  $accountId: ID!
  $status: [StandingOrderStatus!]
  $first: Int!
  $after: String
) {
  account(accountId: $accountId) {
    id
    standingOrders(filters: { status: $status }, first: $first, after: $after) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          label
          period
          reference
          statusInfo {
            status
          }
          sepaBeneficiary {
            id
            name
          }
          targetAvailableBalance {
            currency
            value
          }
          amount {
            currency
            value
          }
          lastExecutionDate
          firstExecutionDate
          nextExecutionDate
          createdBy {
            id
            firstName
            lastName
          }
        }
      }
    }
  }
}

fragment AccountMembership on AccountMembership {
  __typename
  id
  accountId
  createdAt
  updatedAt
  email
  legalRepresentative
  recommendedIdentificationLevel
  hasRequiredIdentificationLevel
  language
  statusInfo {
    __typename
    status
    ... on AccountMembershipBindingUserErrorStatusInfo {
      restrictedTo {
        birthDate
        firstName
        lastName
        phoneNumber
      }
      idVerifiedMatchError
    }
    ... on AccountMembershipInvitationSentStatusInfo {
      restrictedTo {
        birthDate
        firstName
        lastName
        phoneNumber
      }
    }
  }
  taxIdentificationNumber
  residencyAddress {
    addressLine1
    postalCode
    city
    country
  }
  canInitiatePayments
  canManageCards
  canManageAccountMembership
  canManageBeneficiaries
  canViewAccount
  user {
    id
    birthDate
    firstName
    lastName
    mobilePhoneNumber
  }
  account {
    id
    name
    country
    holder {
      id
      ...AccountHolderForCardSettings
    }
  }
  activeCards: cards(filters: { statuses: [Enabled, Processing] }) {
    totalCount
  }
  allCards: cards(filters: { statuses: [Enabled, Processing, Canceling, Canceled] }) {
    totalCount
  }
}

query MembershipDetail($accountMembershipId: ID!) {
  projectInfo {
    id
    B2BMembershipIDVerification
  }
  accountMembership(id: $accountMembershipId) {
    ...AccountMembership
  }
}

query MembersPage(
  $accountId: ID!
  $first: Int!
  $after: String
  $status: [AccountMembershipStatus!]
  $canManageAccountMembership: Boolean
  $canManageBeneficiaries: Boolean
  $canViewAccount: Boolean
  $canManageCards: Boolean
  $canInitiatePayments: Boolean
  $search: String
) {
  account(accountId: $accountId) {
    id
    number
    name
    statusInfo {
      status
    }
    holder {
      id
      info {
        name
      }
    }
    memberships(
      first: $first
      after: $after
      filters: {
        canManageAccountMembership: $canManageAccountMembership
        canManageBeneficiaries: $canManageBeneficiaries
        canInitiatePayments: $canInitiatePayments
        canViewAccount: $canViewAccount
        canManageCards: $canManageCards
        status: $status
        search: $search
      }
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          ...AccountMembership
        }
      }
    }
  }
}

query NewPaymentWizard($first: Int!, $after: String) {
  user {
    id
    accountMemberships(first: $first, after: $after, filters: { canInitiatePayments: true }) {
      edges {
        node {
          id
          account {
            id
            number
            name
            balances {
              ...AccountBalances
            }
            holder {
              id
              info {
                name
              }
            }
          }
        }
        cursor
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}

query ProfilePage {
  projectInfo {
    id
    B2BMembershipIDVerification
  }
  user {
    id
    firstName
    lastName
    mobilePhoneNumber
    birthDate
  }
}

query AccountActivationPage($accountMembershipId: ID!) {
  accountMembership(id: $accountMembershipId) {
    id
    recommendedIdentificationLevel
    account {
      id
      IBAN
      BIC
      paymentLevel
      paymentAccountType
      holder {
        id
        verificationStatus
        info {
          __typename
          name
        }
        residencyAddress {
          country
        }
        supportingDocumentCollections(first: 1) {
          edges {
            node {
              id
              requiredSupportingDocumentPurposes {
                name
              }
              statusInfo {
                status
              }
              supportingDocuments {
                id
                supportingDocumentPurpose

                statusInfo {
                  __typename

                  ... on SupportingDocumentRefusedStatusInfo {
                    downloadUrl
                    filename
                    reason
                  }
                  ... on SupportingDocumentUploadedStatusInfo {
                    downloadUrl
                    filename
                  }
                  ... on SupportingDocumentValidatedStatusInfo {
                    downloadUrl
                    filename
                  }
                }
              }
            }
          }
        }
      }
      legalRepresentativeMembership {
        id
        email
      }
      transactions(first: 0) {
        totalCount
      }
    }
    user {
      id
      firstName
      lastName
      birthDate
      mobilePhoneNumber
    }
  }
  projectInfo {
    id
    supportingDocumentSettings {
      collectMode
    }
  }
}

mutation GenerateSupportingDocumentUploadUrl($input: GenerateSupportingDocumentUploadUrlInput!) {
  generateSupportingDocumentUploadUrl(input: $input) {
    __typename
    ... on GenerateSupportingDocumentUploadUrlSuccessPayload {
      supportingDocumentId
      upload {
        fields {
          key
          value
        }
        url
      }
    }
  }
}

mutation DeleteSupportingDocument($input: DeleteSupportingDocumentInput!) {
  deleteSupportingDocument(input: $input) {
    __typename
    ... on Rejection {
      message
    }
    ... on DeleteSupportingDocumentSuccessPayload {
      id
    }
  }
}

mutation RequestSupportingDocumentCollectionReview(
  $input: RequestSupportingDocumentCollectionReviewInput
) {
  requestSupportingDocumentCollectionReview(input: $input) {
    __typename
    ... on Rejection {
      message
    }
    ... on RequestSupportingDocumentCollectionReviewSuccessPayload {
      supportingDocumentCollection {
        id
      }
    }
  }
}

query TransactionListPage(
  $accountId: ID!
  $first: Int!
  $canQueryCardOnTransaction: Boolean!
  $canViewAccount: Boolean!
  $after: String
  $filters: TransactionsFiltersInput
  $orderBy: TransactionsOrderByInput
) {
  account(accountId: $accountId) {
    id
    number
    name

    balances {
      ...AccountBalances
    }
    transactions(first: $first, after: $after, filters: $filters, orderBy: $orderBy) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        node {
          ...TransactionDetails
        }
      }
    }
  }
}

query BeneficiariesListPage($accountId: ID!, $first: Int!, $after: String) {
  account(accountId: $accountId) {
    id
    trustedBeneficiaries(first: $first, after: $after) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          name
        }
      }
    }
  }
}

query Transaction($id: ID!, $canViewAccount: Boolean!, $canQueryCardOnTransaction: Boolean!) {
  transaction(id: $id) {
    ...TransactionDetails
  }
}

query UpcomingTransactionListPage(
  $accountId: ID!
  $first: Int!
  $canQueryCardOnTransaction: Boolean!
  $canViewAccount: Boolean!
  $after: String
) {
  account(accountId: $accountId) {
    id
    number
    name

    transactions(
      first: $first
      after: $after
      filters: { status: Upcoming }
      orderBy: { field: executionDate, direction: Asc }
    ) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        node {
          ...TransactionDetails
        }
      }
      totalCount
    }
  }
}

query GetAccountMemberships(
  $first: Int!
  $after: String
  $filters: AccountMembershipsFilterInput!
) {
  user {
    id
    accountMemberships(first: $first, after: $after, filters: $filters) {
      pageInfo {
        endCursor
        hasNextPage
      }
      totalCount
      edges {
        cursor
        node {
          id
          canInitiatePayments
          legalRepresentative
          canManageAccountMembership
          canManageBeneficiaries
          canViewAccount
          email
          statusInfo {
            status
          }
          account {
            id
            number
            name
            balances {
              ...AccountBalances
            }
            holder {
              id
              info {
                name
              }
            }
          }
        }
      }
    }
  }
}

query GetFirstAccountMembership($filters: AccountMembershipsFilterInput!) {
  user {
    id
    accountMemberships(first: 1, filters: $filters) {
      edges {
        cursor
        node {
          id
        }
      }
    }
  }
  projectInfo {
    id
    name
  }
}

query GetAccount($accountId: ID!) {
  account(accountId: $accountId) {
    id
    number
    name
    IBAN
    balances {
      ...AccountBalances
    }
    holder {
      id
      info {
        name
      }
    }
  }
}

# Components queries

fragment AddressInfo on AddressInfo {
  __typename
  addressLine1
  addressLine2
  city
  country
  postalCode
  state
}

query GetCardProducts($accountMembershipId: ID!, $after: String, $first: Int!, $search: String) {
  accountMembership(id: $accountMembershipId) {
    id
    account {
      id
      holder {
        id
        info {
          __typename
          ... on AccountHolderCompanyInfo {
            name
          }
          ... on AccountHolderIndividualInfo {
            name
          }
        }
        residencyAddress {
          ...AddressInfo
        }
      }
      allMemberships: memberships(
        filters: { status: [Enabled, InvitationSent, BindingUserError] }
      ) {
        totalCount
      }
      memberships(
        after: $after
        first: $first
        filters: { search: $search, status: [Enabled, InvitationSent, BindingUserError] }
      ) {
        totalCount
        pageInfo {
          endCursor
          hasNextPage
        }
        edges {
          cursor
          node {
            id
            ...AccountMembership
          }
        }
      }
    }
    user {
      id
      firstName
      lastName
      mobilePhoneNumber
    }
  }
  projectInfo {
    id
    cardProducts {
      ...CardProduct
    }
  }
}

fragment CardProduct on CardProduct {
  __typename
  id
  name
  projectId
  status
  createdAt
  updatedAt
  applicableToPhysicalCards
  companySpendingLimit {
    amount {
      value
      currency
    }
    period
  }
  individualSpendingLimit {
    amount {
      value
      currency
    }
    period
  }
  cardDesigns {
    id
    version
    cardProjectLogoSvgUrl
    cardProjectLogo300dpiUrl
    cardProjectLogo600dpiUrl
    zoomRatioProjectLogo
    cardDesignUrl
    accentColor
    createdAt
    updatedAt
    status
    cardBackground {
      id
      name
      type
      cardTextColor
      cardBackgroundUrl
      createdAt
      updatedAt
    }
  }
  defaultCardProduct
}

query GetEligibleCardMemberships($accountId: ID!, $after: String, $first: Int!, $search: String) {
  account(accountId: $accountId) {
    id
    allMemberships: memberships(
      after: $after
      first: $first
      filters: { status: [Enabled, InvitationSent, BindingUserError] }
    ) {
      totalCount
    }
    memberships(
      after: $after
      first: $first
      filters: { search: $search, status: [Enabled, InvitationSent, BindingUserError] }
    ) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          ...AccountMembership
        }
      }
    }
  }
}

query GetTransactionDetails(
  $transactionId: ID!
  $canQueryCardOnTransaction: Boolean!
  $canViewAccount: Boolean!
) {
  transaction(id: $transactionId) {
    ...TransactionDetails
  }
}

fragment AccountBalances on AccountBalances {
  available {
    value
    currency
  }
  pending {
    value
    currency
  }
  booked {
    value
    currency
  }
  reserved {
    value
    currency
  }
}

query GetAccountBalance($accountId: ID!) {
  account(accountId: $accountId) {
    id

    merchantProfiles {
      totalCount
    }
    fundingSources {
      totalCount
    }
    balances {
      ...AccountBalances
    }
    upcomingTransactions: transactions(filters: { status: Upcoming }) {
      totalCount
    }
  }
}

fragment ValidIbanInformation on ValidIban {
  __typename
  iban
  bank {
    name
    address {
      addressLine1
      addressLine2
      city
      country
      postalCode
      state
    }
  }
  reachability {
    sepaCreditTransferInst
  }
}

query getIbanValidation($iban: IBAN!) {
  ibanValidation(input: { iban: $iban }) {
    __typename
    ... on ValidIban {
      ...ValidIbanInformation
    }
    ... on InvalidIban {
      iban
      code
    }
  }
}

query GetBeneficiaryVerification($input: BeneficiaryVerificationInput!) {
  beneficiaryVerification(input: $input) {
    __typename
    ... on BeneficiaryTypo {
      nameSuggestion
    }
    ... on BeneficiaryMismatch {
      nameSuggestion
      accountStatus
    }
    ... on InvalidBeneficiaryVerification {
      message
    }
  }
}

query GetAvailableAccountBalance($accountMembershipId: ID!) {
  accountMembership(id: $accountMembershipId) {
    id
    account {
      id
      balances {
        ...AccountBalances
      }
    }
  }
}

query GetInternationalCreditTransferQuote(
  $value: AmountValue!
  $currency: Currency!
  $accountId: ID!
) {
  internationalCreditTransferQuote(
    accountId: $accountId
    targetAmount: { value: $value, currency: $currency }
  ) {
    exchangeRate
    feesAmount {
      value
      currency
    }
    targetAmount {
      value
      currency
    }
    sourceAmount {
      value
      currency
    }
  }
}

query GetInternationalBeneficiaryDynamicForms(
  $amountValue: AmountValue!
  $currency: Currency!
  $language: InternationalCreditTransferDisplayLanguage!
  $dynamicFields: [InternationalBeneficiaryDetailsInput!]
) {
  internationalBeneficiaryDynamicForms(
    amount: { value: $amountValue, currency: $currency }
    language: $language
    dynamicFields: $dynamicFields
  ) {
    schemes {
      type
      title
      remainingFieldsToRefreshCount
      fields {
        key
        name
        required
        ... on DateField {
          example
          validationRegex
          key
          name
          required
        }
        ... on TextField {
          displayFormat
          example
          validationRegex
          required
          refreshDynamicFieldsOnChange
          name
          minLength
          maxLength
          key
        }
        ... on SelectField {
          __typename
          required
          refreshDynamicFieldsOnChange
          name
          key
          allowedValues {
            name
            key
          }
        }
        ... on RadioField {
          __typename
          required
          refreshDynamicFieldsOnChange
          name
          key
          allowedValues {
            name
            key
          }
        }
      }
    }
  }
}

query GetInternationalCreditTransferTransactionDetailsDynamicForm(
  $name: String!
  $route: InternationalCreditTransferRouteInput!
  $amountValue: AmountValue!
  $currency: Currency!
  $language: InternationalCreditTransferDisplayLanguage!
  $beneficiaryDetails: [InternationalBeneficiaryDetailsInput!]!
  $dynamicFields: [InternationalCreditTransferDetailsInput!]
) {
  internationalCreditTransferTransactionDetailsDynamicForm(
    internationalBeneficiary: {
      details: $beneficiaryDetails
      name: $name
      route: $route
      currency: $currency
    }
    targetAmount: { value: $amountValue, currency: $currency }
    language: $language
    refreshableFields: $dynamicFields
  ) {
    fields {
      ... on TextField {
        displayFormat
        example
        key
        maxLength
        minLength
        name
        refreshDynamicFieldsOnChange
        required
        validationRegex
      }
      ... on SelectField {
        __typename
        allowedValues {
          key
          name
        }
        key
        name
        refreshDynamicFieldsOnChange
        required
      }
      ... on RadioField {
        __typename
        allowedValues {
          key
          name
        }
        name
        key
        refreshDynamicFieldsOnChange
        required
      }
      ... on DateField {
        example
        validationRegex
        key
        name
        required
      }
      required
      name
      key
    }
    remainingFieldsToRefreshCount
  }
}

# Mutations

mutation CreateMultiConsent($input: CreateMultiConsentInput!) {
  createMultiConsent(input: $input) {
    __typename
    ... on CreateMultiConsentSuccessPayload {
      consent {
        id
        consentUrl
      }
    }
    ... on Rejection {
      message
    }
  }
}

fragment CardFragment on Card {
  __typename
  id
  statusInfo {
    __typename
    ... on CardConsentPendingStatusInfo {
      consent {
        id
        consentUrl
      }
    }
  }
}

mutation AddCards($input: AddCardsInput!) {
  addCards(input: $input) {
    __typename
    ... on AddCardsSuccessPayload {
      cards {
        ...CardFragment
      }
    }
    ... on Rejection {
      message
    }
  }
}

mutation AddCard($input: AddCardInput!) {
  addCard(input: $input) {
    __typename
    ... on AddCardSuccessPayload {
      card {
        ...CardFragment
      }
    }
    ... on Rejection {
      message
    }
  }
}

mutation AddCardsWithGroupDelivery($input: AddCardsWithGroupDeliveryInput!) {
  addCardsWithGroupDelivery(input: $input) {
    __typename
    ... on AddCardsWithGroupDeliverySuccessPayload {
      cards {
        ...CardFragment
      }
    }
    ... on Rejection {
      message
    }
  }
}

mutation AddSingleUseVirtualCards($input: AddSingleUseVirtualCardsInput!) {
  addSingleUseVirtualCards(input: $input) {
    __typename
    ... on AddSingleUseVirtualCardsSuccessPayload {
      cards {
        ...CardFragment
      }
    }
    ... on Rejection {
      message
    }
  }
}

mutation AddSingleUseVirtualCard($input: AddSingleUseVirtualCardInput!) {
  addSingleUseVirtualCard(input: $input) {
    __typename
    ... on AddSingleUseVirtualCardSuccessForUserPayload {
      card {
        ...CardFragment
      }
    }
    ... on AddSingleUseVirtualCardSuccessForProjectOwnerPayload {
      card {
        ...CardFragment
      }
    }
    ... on Rejection {
      message
    }
  }
}

mutation InitiateSepaCreditTransfers($input: InitiateCreditTransfersInput!) {
  initiateCreditTransfers(input: $input) {
    __typename
    ... on AccountNotFoundRejection {
      message
    }
    ... on ForbiddenRejection {
      message
    }
    ... on InitiateCreditTransfersSuccessPayload {
      payment {
        id
        statusInfo {
          __typename
          ... on PaymentRejected {
            reason
          }
          ... on PaymentConsentPending {
            consent {
              id
              consentUrl
            }
          }
        }
      }
    }
  }
}

mutation AddCardMembership($accountMembershipId: ID!, $consentRedirectUrl: String!) {
  addCard(
    input: {
      accountMembershipId: $accountMembershipId
      withdrawal: true
      international: true
      nonMainCurrencyTransactions: true
      eCommerce: true
      consentRedirectUrl: $consentRedirectUrl
      cardContractExpiryDate: null
    }
  ) {
    __typename
    ... on AddCardSuccessPayload {
      card {
        id
        statusInfo {
          __typename
          ... on CardConsentPendingStatusInfo {
            consent {
              id
              consentUrl
            }
          }
        }
      }
    }
  }
}

mutation ResumeAccountMembership($input: ResumeAccountMembershipInput!) {
  resumeAccountMembership(input: $input) {
    __typename
    ... on ResumeAccountMembershipSuccessPayload {
      consent {
        consentUrl
      }
    }
  }
}

mutation SuspendAccountMembership($input: SuspendAccountMembershipInput!) {
  suspendAccountMembership(input: $input) {
    __typename
  }
}

mutation UpdateAccountMembership($input: UpdateAccountMembershipInput!) {
  updateAccountMembership(input: $input) {
    __typename
    ... on UpdateAccountMembershipSuccessPayload {
      consent {
        id
        consentUrl
      }
    }
    ... on ValidationRejection {
      fields {
        path
      }
    }
  }
}

mutation DisableAccountMembership($accountMembershipId: ID!) {
  disableAccountMembership(input: { accountMembershipId: $accountMembershipId }) {
    __typename
  }
}

mutation ViewCardNumbers($input: ViewCardNumbersInput!) {
  viewCardNumbers(input: $input) {
    __typename
    ... on ViewCardNumbersSuccessPayload {
      consent {
        id
        consentUrl
        purpose
        redirectUrl
        status
      }
    }
    ... on Rejection {
      message
    }
  }
}

mutation ViewPhysicalCardNumbers($input: ViewPhysicalCardNumbersInput!) {
  viewPhysicalCardNumbers(input: $input) {
    __typename
    ... on ViewPhysicalCardNumbersSuccessPayload {
      consent {
        id
        consentUrl
        purpose
        redirectUrl
        status
      }
    }
    ... on Rejection {
      message
    }
  }
}

mutation ViewPhysicalCardPin($input: ViewPhysicalCardPinInput!) {
  viewPhysicalCardPin(input: $input) {
    __typename
    ... on ViewPhysicalCardPinSuccessPayload {
      consent {
        id
        consentUrl
      }
    }
  }
}

mutation ActivatePhysicalCard($input: ActivatePhysicalCardInput!) {
  activatePhysicalCard(input: $input) {
    __typename
    ... on ActivatePhysicalCardSuccessPayload {
      consent {
        id
        consentUrl
      }
    }
  }
}

mutation CancelCard($cardId: ID!) {
  cancelCard(input: { cardId: $cardId }) {
    __typename
    ... on CancelCardSuccessPayload {
      card {
        id
      }
    }
  }
}

mutation CancelDigitalCard($digitalCardId: ID!) {
  cancelDigitalCard(input: { digitalCardId: $digitalCardId }) {
    __typename
    ... on CancelDigitalCardSuccessPayload {
      digitalCard {
        id
      }
    }
  }
}

mutation CancelPhysicalCard($input: CancelPhysicalCardInput!) {
  cancelPhysicalCard(input: $input) {
    __typename
    ... on CancelPhysicalCardSuccessPayload {
      physicalCard {
        identifier
      }
    }
  }
}

mutation UpdateCard($input: UpdateCardInput!) {
  updateCard(input: $input) {
    __typename
    ... on UpdateCardSuccessPayload {
      consent {
        id
        consentUrl
      }
    }
  }
}

mutation ConfirmPhysicalCardRenewal($input: ConfirmPhysicalCardRenewalInput!) {
  confirmPhysicalCardRenewal(input: $input) {
    __typename
    ... on ConfirmPhysicalCardRenewalSuccessPayload {
      physicalCard {
        identifier
      }
    }
    ... on Rejection {
      message
    }
  }
}

mutation ScheduleStandingOrder($input: ScheduleStandingOrderInput!) {
  scheduleStandingOrder(input: $input) {
    __typename
    ... on ScheduleStandingOrderSuccessPayload {
      standingOrder {
        id
        statusInfo {
          __typename
          ... on StandingOrderConsentPendingStatusInfo {
            consent {
              id
              consentUrl
            }
          }
        }
      }
    }
  }
}

mutation CancelStandingOrder($id: String!) {
  cancelStandingOrder(input: { standingOrderId: $id }) {
    __typename
    ... on CancelStandingOrderSuccessPayload {
      standingOrder {
        id
      }
    }
  }
}

mutation SuspendPhysicalCard($cardId: ID!) {
  suspendPhysicalCard(input: { cardId: $cardId }) {
    __typename
  }
}

mutation ResumePhysicalCard($input: ResumePhysicalCardInput!) {
  resumePhysicalCard(input: $input) {
    __typename
    ... on ResumePhysicalCardSuccessPayload {
      consent {
        id
        consentUrl
      }
    }
  }
}

# Not on federation, stitched with partner schema in the white-label BFF
mutation AddAccountMembership($input: AddAccountMembershipInput!) {
  addAccountMembership(input: $input) {
    __typename
    ... on AddAccountMembershipSuccessPayload {
      accountMembership {
        __typename
        id
        email
        statusInfo {
          __typename
          status
          ... on AccountMembershipConsentPendingStatusInfo {
            consent {
              consentUrl
            }
          }
        }
        canInitiatePayments
        canManageAccountMembership
        canManageBeneficiaries
        canViewAccount
        user {
          id
          birthDate
          firstName
          lastName
          mobilePhoneNumber
        }
        account {
          id
        }
      }
    }
  }
}

mutation GenerateAccountStatement($input: GenerateAccountStatementInput!) {
  generateAccountStatement(input: $input) {
    id
  }
}

mutation InitiateInternationalCreditTransfer($input: InitiateInternationalCreditTransferInput!) {
  initiateInternationalCreditTransfer(input: $input) {
    __typename
    ... on Rejection {
      message
    }
    ... on InitiateInternationalCreditTransferResponseSuccessPayload {
      payment {
        id
        statusInfo {
          __typename
          ... on PaymentRejected {
            reason
          }
          ... on PaymentConsentPending {
            consent {
              id
              consentUrl
            }
          }
        }
      }
    }
  }
}
